<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>大数据创新中心</title><link>https://yulongbb.github.io/</link><description>Recent content on 大数据创新中心</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 03 Jan 2021 12:00:00 -0500</lastBuildDate><atom:link href="https://yulongbb.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>MongoDB副本集集群搭建</title><link>https://yulongbb.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link><pubDate>Sun, 03 Jan 2021 12:00:00 -0500</pubDate><guid>https://yulongbb.github.io/post/mongodb%E5%89%AF%E6%9C%AC%E9%9B%86%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid><description>mongodb集群的副本集和sharding模式目前是用的最广的方案，通常这2种方案的选择通过数据量和并发数来权衡。在GB级别的基本上副本集方案可满足，TB级别或以上采用sharding模式，解决单机容量和单机并发能力。这两种既有自己的优势也有自己的缺点，比如sharding模式分片越多，性能自然下降越多。
准备三台服务器
192.168.101.100 192.168.101.101 192.168.101.102
安装mongodb
软件安装目录 /usr/program 软件安装包存放目录 /usr/setups
上传安装包
scp mongodb-linux-x86_64-rhel70-4.0.10.gz root@192.168.101.100:/usr/setups/ scp mongodb-linux-x86_64-rhel70-4.0.10.gz root@192.168.101.101:/usr/setups/ scp mongodb-linux-x86_64-rhel70-4.0.10.gz root@192.168.101.102:/usr/setups/
解压 tar -xzvf mongodb-linux-x86_64-rhel70-4.0.10.gz
移动安装目录
mv mongodb-linux-x86_64-rhel70-4.0.10.gz /usr/program/mongodb
上传配置文件 scp mongodb.conf root@192.168.101.100:/usr/program/mongodb/conf scp mongodb.conf root@192.168.101.101:/usr/program/mongodb/conf scp mongodb.conf root@192.168.101.102:/usr/program/mongodb/conf
启动mongodb
mkdir -p /usr/program/mongodb/data mkdir -p /usr/program/mongodb/log touch /usr/program/mongodb/log/mongodb.log
lsof -i:27017
./mongod -f /usr/program/mongodb/conf/mongodb.conf
配置集群
./mongo
config = { _id: &amp;ldquo;mongors&amp;rdquo;, members: [ {_id: 0, host: &amp;ldquo;192.168.101.100:27017&amp;rdquo;, priority:2}, {_id: 2, host: &amp;ldquo;192.168.101.101::27017&amp;rdquo;, priority:1}, {_id: 1, host: &amp;ldquo;192.</description></item><item><title>使用Github Actions部署静态网站</title><link>https://yulongbb.github.io/post/%E4%BD%BF%E7%94%A8github-actions%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</link><pubDate>Sat, 02 Jan 2021 12:00:00 -0500</pubDate><guid>https://yulongbb.github.io/post/%E4%BD%BF%E7%94%A8github-actions%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</guid><description>介绍 HUGO是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
GitHub Actions是一个CI / CD工具，用于自动化GitHub中的测试，构建和部署过程。
步骤 1:创建GitHub仓库 创建创建GitHub仓库并命名为&amp;lt;your GitHub username&amp;gt;.github.io。
2:安装HUGO并创建项目 在Window 10上安装HUGO需要在官方仓库的releases页面下载最新版本HUGO的编译文件到本地并配置环境变量。
# 创建项目 hugo new &amp;lt;your GitHub username&amp;gt;.github.io # 安装主题 git clone --depth 1 --recursive https://github.com/gohugoio/hugoThemes.git themes # 本地运行 hugo server -D 3:将HUGO项目推送至GitHub仓库 # 初始化仓库 git init # 将全部文件添加到暂存区 git add * # 提交暂存区代码 git commit -m &amp;#34;创建HUGO项目&amp;#34; # 创建主分支 git branch -M main # 配置远程Github仓库 git remote add origin https://github.com/&amp;lt;your GitHub username&amp;gt;/&amp;lt;your GitHub username&amp;gt;.github.io.git # 推送代码到远程Github仓库 git push -u origin main 4:创建GitHub的token 在https://github.</description></item><item><title>联系我</title><link>https://yulongbb.github.io/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yulongbb.github.io/contact/</guid><description>This is an example of a custom shortcode that you can put right into your content. You will need to add a form action to the the shortcode to make it work. Check out Formspree for a simple, free form service.</description></item></channel></rss>